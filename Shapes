-- | Types and functions for shapes. The list of all tetris pieces.
module Shapes where
import Data.List(transpose)
import Data.Maybe(isNothing)
import Test.QuickCheck

-- * Shapes

type Square = Maybe Colour

data Colour = Black | Red | Green | Yellow | Blue | Purple | Cyan | Grey
              deriving (Eq,Bounded,Enum,Show)

-- | A geometric shape is represented as a list of lists of squares. Each square
-- can be empty or filled with a block of a specific colour.

data Shape = S [Row] deriving (Eq)
type Row = [Square]

rows :: Shape -> [Row]
rows (S rs) = rs

-- * Showing shapes

showShape :: Shape -> String
showShape s = unlines [showRow r | r <- rows s]
  where
    showRow :: Row -> String
    showRow r = [showSquare s | s <- r]
    
    showSquare Nothing = '.'
    showSquare (Just Black) = '#' -- can change to '█' on linux/mac
    showSquare (Just Grey)  = 'g' -- can change to '▓'
    showSquare (Just c)     = head (show c)

instance Show Shape where
  show = showShape
  showList ss r = unlines (map show ss)++r


-- * The shapes used in the Tetris game

-- | All 7 tetrominoes (all combinations of connected 4 blocks),
-- see <https://en.wikipedia.org/wiki/Tetromino>
allShapes :: [Shape]
allShapes = [S (makeSquares s) | s <- shapes] 
   where
      makeSquares = map (map colour)
      colour c    = lookup c [('I',Red),('J',Grey),('T',Blue),('O',Yellow),
                              ('Z',Cyan),('L',Green),('S',Purple)]
      shapes = 
             [["I",
               "I",
               "I",
               "I"],
              [" J",
               " J",
               "JJ"],
              [" T",
               "TT",
               " T"],
              ["OO",
               "OO"],
              [" Z",
               "ZZ",
               "Z "],
              ["LL",
               " L",
               " L"],
              ["S ",
               "SS",
               " S"]]

-- * Some simple functions

-- ** A01
emptyShape :: (Int,Int) -> Shape
emptyShape (n,r) = S (replicate r (emptyList n))

emptyList :: Int -> Row
emptyList n = replicate n Nothing

-- ** A02

-- | The size (width and height) of a shape
shapeSize :: Shape -> (Int,Int)
shapeSize (S (s:rs)) = ((length s), (length (s:rs)))

-- ** A03

-- | Count how many non-empty squares a shape contains
blockCount :: Shape -> Int
blockCount (S (s:rs)) = length ((filter(Nothing/=))(concat (s:rs)))


-- * The Shape invariant

-- ** A04
-- | Shape invariant (shapes have at least one row, at least one column,
-- and are rectangular)
prop_Shape :: Shape -> Bool
prop_Shape (S (s:rs)) = ((length s)>0) && ((length rs)>0)


-- * Test data generators

-- ** A05
-- | A random generator for colours
rColour :: Gen Colour
rColour = elements [Black,Red,Green,Yellow,Blue,Purple,Cyan,Grey]

instance Arbitrary Colour where
  arbitrary = rColour

-- ** A06
-- | A random generator for shapes
rShape :: Gen Shape
rShape = elements allShapes

instance Arbitrary Shape where
  arbitrary = rShape

-- * Transforming shapes

-- ** A07
-- | Rotate a shape 90 degrees
rotateShape :: Shape -> Shape
rotateShape (S (s:rs)) = S (reverse (transpose (s:rs)))

-- ** A08
-- | shiftShape adds empty squares above and to the left of the shape
shiftShape :: (Int,Int) -> Shape -> Shape
shiftShape (n,r) (S (s:rs)) = S (shiftRight n (shiftDown r (s:rs)))

shiftRight :: Int -> [Row] -> [Row]
shiftRight n row = [(replicate n Nothing) ++ r | r <- row]

shiftDown :: Int -> [Row] -> [Row]
shiftDown n (s:rs) = (rows (emptyShape ((length(s)),n))) ++ (s:rs)

-- ** A09
-- | padShape adds empty sqaure below and to the right of the shape
padShape :: (Int,Int) -> Shape -> Shape
padShape (n,r) (S (s:rs)) = S (shiftLeft n ( shiftUp r (s:rs)))

shiftUp :: Int -> [Row] -> [Row]
shiftUp n (s:rs) = (s:rs) ++ (rows (emptyShape ((length(s)),n)))

shiftLeft :: Int -> [Row] -> [Row]
shiftLeft n row = [r ++ (replicate n Nothing) | r <-row]

-- ** A10
-- | pad a shape to a given size
padShapeTo :: (Int,Int) -> Shape -> Shape
padShapeTo (n,r) (S (s:rs)) = padShape ((n-x),(r-y)) (S (s:rs)) 
  where (x,y) = shapeSize (S (s:rs))

-- * Comparing and combining shapes

-- ** B01

--Test if two shapes does not overlap

-- | Test if two shapes overlap
overlaps :: Shape -> Shape -> Bool
overlaps (S []) _ = True
overlaps _ (S []) = True
(S(s1:ss1)) `overlaps` (S(s2:ss2)) = (rowsOverLap s1 s2) || (overlaps (S(ss1)) (S(ss2)))

rowsOverLap :: Row -> Row -> Bool
rowsOverLap [] _ = True
rowsOverLap _ [] = True
rowsOverLap (s:ss) (r:rs) = not ((s == Nothing || r == Nothing) && (rowsOverLap ss rs))



--rowsOverLap (r:rs) (x:xs) = or(zipWith (==) (r:rs) (x:xs))


-- ** B02
-- | zipShapeWith, like 'zipWith' for lists
zipShapeWith :: (Square->Square->Square) -> Shape -> Shape -> Shape
zipShapeWith f (S rows1) (S rows2) = S(zipWith (zipRowWith f) rows1 rows2)

zipRowWith :: (Square -> Square -> Square) -> Row -> Row -> Row
zipRowWith f row1 row2 = zipWith f row1 row2
-- zipRowWith f row1 row2 = map (uncurry f) zippedRows
--   where zippedRows = zip row1 row2

blackClashes :: Shape -> Shape -> Shape
blackClashes s1 s2 = zipShapeWith clash s1 s2  
  where clash :: Square -> Square -> Square 
        clash Nothing Nothing = Nothing
        clash Nothing s       = s
        clash s       Nothing = s
        clash (Just c1) (Just c2) = Just Black

-- ** B03
-- | Combine two shapes. The two shapes should not overlap.
-- The resulting shape will be big enough to fit both shapes.
combine :: Shape -> Shape -> Shape
s1 `combine` s2 = zipShapeWith combineElement newS1 newS2 
    where (x, y) = combineSizeShape s1 s2
          newS1 = padShapeTo (x, y) s1
          newS2 = padShapeTo (x, y) s2 

combineElement :: Square -> Square -> Square
combineElement Nothing s = s
combineElement s Nothing = s


combineSizeShape :: Shape -> Shape -> (Int,Int)
combineSizeShape s1 s2 = (max (fst (shapeSize(s1))) (snd(shapeSize(s1))), max (fst(shapeSize(s2))) (snd(shapeSize(s2))))
